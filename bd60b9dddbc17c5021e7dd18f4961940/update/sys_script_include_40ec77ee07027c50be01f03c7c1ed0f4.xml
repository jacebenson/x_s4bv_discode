<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_s4bv_discode.ScanEngineBase</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Scan Engine Base Class containing all baseline application functionality for execution of scans</description>
        <name>ScanEngineBase</name>
        <script><![CDATA[var ScanEngineBase = Class.create();
ScanEngineBase.prototype = Object.extendsObject(Core, {
    initialize: function () {},

    /**
     * scanAllApplications will execute the scanners for all applications provided in the property
     * @returns object with results
     */
    scanAllApplications: function () {
        return this._scanAllApplications();
    },

    /**
     * scanApplication will execute the scanners defined for the given scope
     * @param {String} strScopeName 
     * @returns object with results
     */
    scanApplication: function (strScopeName) {
        return this._scanApplication(strScopeName);
    },

    /**
     * scanApplicationFile will execute the scanners defined on the specified file
     * @param {GlideRecord} grFile record being scanned
     * @returns object summary of scan result
     */
    scanApplicationFile: function (grFile) {
        return this._scanApplicationFile(grFile);
    },

    /**
     * _getSourceScanner will return an object of the specified class, ready to run the scan
     * against the GlideRecord provided...
     * @param {GlideRecord} grSource GlideRecord of the object about to be scanned
     * @param {String} strApiName Name of the API which is going to do the scanning
     * @returns instantiated class of the named API string, ready to run OR... null
     */
    _getSourceScanner: function (grSource, strApiName) {
        if (!grSource || !strApiName || !x_s4bv_discode[strApiName]) return;

        var api = new x_s4bv_discode[strApiName](grSource, 'source');
        if (!api) return;

        return api;
    },

    /**
     * _scanAllApplications will lookup the property settings and execute scans against
     * all objects in all specified tables
     * @returns object of the result
     * an object is lovely because we can expand it, or whatever...
     */
    _scanAllApplications: function () {
        var arrApplicationList = this.arrApplicationList || this._getArrSourceApplications();
        var objResult = {};
        var iRunScanCount = 0;
        for (var iApplication in arrApplicationList) {
            var strScopeName = arrApplicationList[iApplication];
            this.scanApplication(strScopeName);
            iRunScanCount++;
        }
        objResult.scan_count = iRunScanCount;
        return objResult;
    },

    /**
     * 
     * @param {String} strScopeName sys_scope scope value , to execute scan against all objects
     * in the specified properties, limited by the scope∏
     * @returns object summary of scan result
     */
    _scanApplication: function (strScopeName) {
        try {
            var obj = {
                'application_name': strScopeName
            };
            this._logScan('Discode... Scanning Application', obj, 1);
            var iMsStartTime = new Date().getTime();
            var arrSourceTableList = this.arrSourceTableList || this._getArrSourceTableList();
            var iTableCount = 0,
                iApiCount = 0,
                iFileCount = 0;

            for (var iTable in arrSourceTableList) {
                iTableCount++;
                var strTableName = arrSourceTableList[iTable];
                var objApiNames = this.objSourceTableTargets || this._getObjSourceTableTargets() || {};
                var arrApiNames = objApiNames[strTableName].arrTargetScanners || [];
                var grFile = new GlideRecord(strTableName);
                grFile.addQuery('sys_scope.scope', strScopeName);
                grFile.query();

                while (grFile.next()) {
                    iFileCount++;
                    iApiCount = parseInt(this._scanFile(grFile, arrApiNames, iApiCount));
                }
            }
            var iMsEndTime = new Date().getTime();
            var iMsDuration = iMsEndTime - iMsStartTime;
            obj.table_list = arrSourceTableList.toString();
            obj.total_file_count = iFileCount;
            obj.total_scanner_execution_count = iApiCount;
            obj.scan_duration_ms = iMsDuration;
            var gd = new GlideDuration(iMsDuration);
            obj.scan_duration_display_value = gd.getDisplayValue();
            this._logScan('Discode... Application Scan Finished', obj, 1);
            return obj;
        } catch (ex) {
            gs.error('Discode: ' + this.type + ' _scanApplication ERROR: ' + ex.getMessage());
        }
    },

    /**
     * 
     * @param {GlideRecord} grFile record being scanned
     * @returns object summary of scan result
     */
     _scanApplicationFile: function (grFile) {
        try {
            var obj = {};
            if (!grFile || !grFile.isValidRecord()) {
                obj.result = 'Error';
                obj.msg = 'Invalid File Provided';
                this._logScan('Discode... Error Scanning File', obj, 0);
                return obj;
            }
            var iMsStartTime = new Date().getTime();
            var iMsEndTime = new Date().getTime();
            var iMsDuration = iMsEndTime - iMsStartTime;

            var grScope = grFile.sys_scope.getRefRecord();
            var strTableName = grFile.getTableName();

            obj.application_name = grScope.getValue('scope') || '';
            obj.file_name = grFile.getDisplayValue();
            obj.file_table_name = strTableName;
            obj.file_sys_id = grFile.getUniqueValue();
            
            if (!this._canScanTable(strTableName)) {
                obj.result = 'Error';
                obj.msg = 'File type is not supported.';
                this._logScan('Discode... Error Scanning File', obj, 0);
                return obj;
            }

            this._logScan('Discode... Scanning File', obj, 1);
            var iTableCount = 1,
                iApiCount = 0,
                iFileCount = 1;

            var arrApiNames = this._getArrScannerApiNamesForTable(strTableName);
            iApiCount = parseInt(this._scanFile(grFile, arrApiNames, iApiCount));

            obj.table_list = strTableName;
            obj.result = 'Success';
            obj.total_file_count = iFileCount;
            obj.total_scanner_execution_count = iApiCount;
            obj.scan_duration_ms = iMsDuration;
            var gd = new GlideDuration(iMsDuration);
            obj.scan_duration_display_value = gd.getDisplayValue();
            this._logScan('Discode... File Scan Finished', obj, 1);
            return obj;
        } catch (ex) {
            gs.error('Discode: ' + this.type + ' _scanApplicationFile ERROR: ' + ex.getMessage());
        }
    },

    /**
     * _scanFile execute the scans against file
     * @param {GlideRecord} grFile record to be scanned
     * @param {Array} arrApiNames list of Scanner API names to be executed against grFile
     * @param {Integer} iApiCount count of API executions
     * @returns iApiCount
     */
    _scanFile: function (grFile, arrApiNames, iApiCount) {
        if (!grFile || !grFile.isValidRecord() || !arrApiNames) return false;
        iApiCount = iApiCount || 0;
        for (var iApi in arrApiNames) {
            iApiCount++;
            var strApiName = arrApiNames[iApi];
            var apiScan = this._getSourceScanner(grFile, strApiName);
            if (apiScan) {
                apiScan.run();
            }
        }
        return iApiCount;
    },

    /**
     * 
     * @returns array of the applications which will be targeted in the scan
     */
    _getArrSourceApplications: function () {
        var strApplicationList = gs.getProperty(this.C_PROP_SCAN_SOURCE_APPLICATIONS, '');
        if (!strApplicationList) return;
        var arrApplicationList = strApplicationList.split(',') || [];
        this.arrApplicationList = arrApplicationList;
        return arrApplicationList;
    },

    /**
     * 
     * @returns object result containing the table based on property settings
     */
    _getObjSourceTableTargets: function () {
        var arrSourceTableList = this.arrSourceTableList || this._getArrSourceTableList();
        var obj = {};
        for (var iTable in arrSourceTableList) {
            var strTableName = arrSourceTableList[iTable];
            obj[strTableName] = obj[strTableName] || {};
            obj[strTableName].arrTargetScanners = this._getArrScannerApiNamesForTable(strTableName);
        }
        this.objSourceTableTargets = obj;
        return obj;
    },

    /**
     * 
     * @param {String} strTableName name of table provided to get an array of scanner Api names
     * @returns 
     */
    _getArrScannerApiNamesForTable: function (strTableName) {
        var strPropertyPrefix = this.C_PROP_PREFIX_API_SCAN_SOURCE || '';
        var strTargetScanners = gs.getProperty(strPropertyPrefix + strTableName, '');
        if (!strTargetScanners) return [];
        return strTargetScanners.split(',');
    },


        /**
     * _logScan will create a syslog entry, if the specified verbosity is greater than system property
     * @param {String} msg Intro Message to be logged as a prefix
     * @param {Object} obj JSON of this Object will be printed to logs
     * @param {Integer} level Verbosity of the log entry
     * @returns 
     */
         _logScan: function (msg, obj, level /* optional */ ) {
            level = level || 0;
            if (gs.getProperty(this.C_PROP_SCAN_LOG_VERBOSITY, 0) < level) return;
            msg = msg || '';
            obj = obj || {};
            gs.info(gs.getMessage('{0}: {1}', [msg, JSON.stringify(obj)])); // TODO: improve logging
        },


    type: 'ScanEngineBase'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>w.geek6</sys_created_by>
        <sys_created_on>2021-08-21 22:27:08</sys_created_on>
        <sys_id>40ec77ee07027c50be01f03c7c1ed0f4</sys_id>
        <sys_mod_count>27</sys_mod_count>
        <sys_name>ScanEngineBase</sys_name>
        <sys_package display_value="Discode" source="x_s4bv_discode">bd60b9dddbc17c5021e7dd18f4961940</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Discode">bd60b9dddbc17c5021e7dd18f4961940</sys_scope>
        <sys_update_name>sys_script_include_40ec77ee07027c50be01f03c7c1ed0f4</sys_update_name>
        <sys_updated_by>w.geek6</sys_updated_by>
        <sys_updated_on>2021-09-14 20:45:01</sys_updated_on>
    </sys_script_include>
</record_update>
